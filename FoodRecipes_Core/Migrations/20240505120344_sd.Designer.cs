// <auto-generated />
using System;
using FoodRecipes_Core.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodRecipes_Core.Migrations
{
    [DbContext(typeof(FoodRecipesDbContext))]
    [Migration("20240505120344_sd")]
    partial class sd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 5, 15, 3, 44, 133, DateTimeKind.Local).AddTicks(7193));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Admin");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AdminId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Admins", t =>
                        {
                            t.HasCheckConstraint("CH_DisplayName_Length", "LEN(DisplayName)>=3 AND LEN(DisplayName)<=50");

                            t.HasCheckConstraint("CH_Password_Length", "LEN([Password])>=8 AND LEN([Password])<=20");

                            t.HasCheckConstraint("CH_Username_Length", "LEN(Username)>=3 AND LEN(Username)<=254");
                        });
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 5, 15, 3, 44, 134, DateTimeKind.Local).AddTicks(1197));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Client");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Clients", t =>
                        {
                            t.HasCheckConstraint("CH_Email_Length", "LEN(Email)>=13 AND LEN(Email)<=254");

                            t.HasCheckConstraint("CH_Email_Like", "Email Like '%@gmail.com%' OR Email Like  '%@outlook.com%' OR Email Like '%@yahoo.com%'");

                            t.HasCheckConstraint("CH_FirstName_Length", "LEN(FirstName)>=3 AND LEN(FirstName)<=20");

                            t.HasCheckConstraint("CH_LastName_Length", "LEN(LastName)>=3 AND LEN(LastName)<=20");

                            t.HasCheckConstraint("CH_Password_Length", "LEN([Password])>=8 AND LEN([Password])<=20")
                                .HasName("CH_Password_Length1");

                            t.HasCheckConstraint("CH_Username_Length", "LEN(Username)>=3 AND LEN(Username)<=50")
                                .HasName("CH_Username_Length1");
                        });
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DishId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 5, 15, 3, 44, 134, DateTimeKind.Local).AddTicks(4432));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FoodSectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Steps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DishId");

                    b.HasIndex("AdminId");

                    b.HasIndex("DishName")
                        .IsUnique();

                    b.HasIndex("FoodSectionId");

                    b.ToTable("Dishes", t =>
                        {
                            t.HasCheckConstraint("CH_Description_Length", "LEN(Description)>=50 AND LEN(Description)<=255");

                            t.HasCheckConstraint("CH_DishName_Length", "LEN(DishName)>=2 AND LEN(DishName)<=30");

                            t.HasCheckConstraint("CH_Steps_Length", "LEN(Steps)>=30 AND LEN(Steps)<=255");
                        });
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.Donation", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationId"));

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 5, 15, 3, 44, 134, DateTimeKind.Local).AddTicks(8992));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("DonationId");

                    b.HasIndex("CardType")
                        .IsUnique();

                    b.HasIndex("ClientId");

                    b.ToTable("Donations", t =>
                        {
                            t.HasCheckConstraint("CH_CardType", "LEN(CardType)>=100 AND LEN(CardType)<=104 ");

                            t.HasCheckConstraint("CH_PaymentMethod_Type", "PaymentMethod>=0 AND PaymentMethod<=1 ");

                            t.HasCheckConstraint("CH_Point_Count", "Point>=1");

                            t.HasCheckConstraint("CH_Price_Value", "Price>0");
                        });
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.FoodSection", b =>
                {
                    b.Property<int>("FoodSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FoodSectionId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 5, 15, 3, 44, 135, DateTimeKind.Local).AddTicks(1430));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nchar(255)")
                        .IsFixedLength();

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FoodSectionId");

                    b.HasIndex("AdminId")
                        .IsUnique();

                    b.HasIndex("SectionName")
                        .IsUnique();

                    b.ToTable("FoodSections", t =>
                        {
                            t.HasCheckConstraint("CH_SectionName_NameOfSection", "LEN(SectionName)>=10 AND LEN(SectionName)<=16");
                        });
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 5, 15, 3, 44, 136, DateTimeKind.Local).AddTicks(8042));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<float>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("ReviewId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CH_Rating_Range", "Rating>=0 AND Rating<=10");
                        });
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.Dish", b =>
                {
                    b.HasOne("FoodRecipes_Core.Models.Entites.Admin", "Admin")
                        .WithMany("Dishes")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodRecipes_Core.Models.Entites.FoodSection", "FoodSection")
                        .WithMany("Dishes")
                        .HasForeignKey("FoodSectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("FoodSection");
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.Donation", b =>
                {
                    b.HasOne("FoodRecipes_Core.Models.Entites.Client", "Client")
                        .WithMany("Donations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.FoodSection", b =>
                {
                    b.HasOne("FoodRecipes_Core.Models.Entites.Admin", "Admin")
                        .WithOne("FoodSection")
                        .HasForeignKey("FoodRecipes_Core.Models.Entites.FoodSection", "AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.Review", b =>
                {
                    b.HasOne("FoodRecipes_Core.Models.Entites.Client", "Client")
                        .WithOne("Review")
                        .HasForeignKey("FoodRecipes_Core.Models.Entites.Review", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.Admin", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("FoodSection")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.Client", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodRecipes_Core.Models.Entites.FoodSection", b =>
                {
                    b.Navigation("Dishes");
                });
#pragma warning restore 612, 618
        }
    }
}
